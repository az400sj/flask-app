trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - .devcontainer
      - README.md

variables:
  pythonVersion: 3.10
  azureServiceConnection: azure-devops-sp-arm
  resourceGroupName: dev-rg
  location: westeurope
  webAppName: az400sjtrain

stages:
  - stage: "CI"
    jobs:
      - job: "Build"
        displayName: "CI - build and test"
        pool:
          vmImage: "ubuntu-latest"

        steps:
          - task: UsePythonVersion@0
            displayName: "Install python"
            inputs:
              versionSpec: $(pythonVersion)

          - script: |
              pipx install poetry
            displayName: "Install poetry"

          - script: |
              poetry install
            displayName: "Install python dependencies"

          - script: |
              poetry run ruff check
              poetry run ruff format --check
            displayName: "Run linter and formatter checks"

          - script: |
              poetry run pytest --junitxml=junit/test-results.xml
            displayName: "Run pytest"

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFiles: "**/test-*.xml"
              testRunTitle: "Publish test results"

          - script: |
              poetry export -f requirements.txt --output requirements.txt
              zip -r $(Build.ArtifactStagingDirectory)/app.zip src/ static/ templates/ main.py requirements.txt
            displayName: "Build app"

          - publish: "$(Build.ArtifactStagingDirectory)"
            artifact: zippedApp

  - stage: "Dev"
    displayName: "Dev deployment"
    dependsOn: CI
    condition: succeeded()
    jobs:
      - deployment: Deploy
        pool:
          vmImage: "ubuntu-latest"
        environment: dev
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  displayName: "Checkout repo source code"
                - task: AzureCLI@2
                  displayName: "Deploy cloud resources"
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    scriptType: bash
                    scriptLocation: inlineScript
                    useGlobalConfig: false
                    inlineScript: |
                      az group create --name $(resourceGroupName) --location $(location)
                      az deployment group create --resource-group $(resourceGroupName) --template-file .azure/bicep/main.bicep --parameters webAppName=$(webAppName)
                - download: current
                  displayName: "Download zipped app code"
                  artifact: zippedApp
                - task: AzureWebApp@1
                  displayName: "Deploy app code to WebApp"
                  inputs:
                    azureSubscription: $(azureServiceConnection)
                    appType: "webAppLinux"
                    appName: "$(WebAppNameDev)"
                    package: "$(Pipeline.Workspace)/zippedApp/*.zip"
